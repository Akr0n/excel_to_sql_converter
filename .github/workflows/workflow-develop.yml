name: Build & Release Python Executable (Windows)

on:
  push:
    branches:
      - develop

jobs:
  build-release:
    if: ${{ github.event.head_commit.message == 'RELEASE' }}
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
        
      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Run PyInstaller
        run: pyinstaller --onefile --windowed excel_to_sql_converter.py

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed excel_to_sql_converter.py

      #- name: Get current version
      #  run: |
      #    $VERSION = python -c "from excel_to_sql_converter import __version__; print(__version__)"
      #    echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Get last dev tag and increment
        id: version
        shell: pwsh
        run: |
          git fetch --tags
          $tags = git tag --list "v*-dev" | ForEach-Object { $_.TrimStart("v") -replace "-dev", "" } | Where-Object { $_ -match '^\d+\.\d+\.\d+$' } | Sort-Object {[version]$_} -Descending
          if ($tags.Count -eq 0) {
            $new_version = "1.0.0-dev"
          } else {
            $last_tag = $tags[0]
            if (-not $last_tag -or $last_tag -eq '') { throw "Tag non valido!" }
            if ($last_tag -is [string] -and $last_tag.Split(".").Length -eq 3) {
              $parts = $last_tag.Split(".")
              $parts[2] = ([int]$parts[2]) + 1
              $new_version = "$($parts[0]).$($parts[1]).$($parts[2])-dev"
            } else {
              throw "No valid semver tag found."
            }
          }
          if (-not $new_version -or $new_version -eq '') { throw "Versione non calcolata!" }
          echo "NEWVERSION=$new_version" | Out-File -FilePath $env:GITHUB_ENV -Append


      - name: Check the new version
        if: env.NEWVERSION == '' || env.NEWVERSION == null
        run: |
          echo "::error::NEWVERSION non valorizzato! Build interrotta."
          exit 1

      - name: Create and push tag
        run: |
          git config --global user.email "federico.bot@gmail.com"
          git config --global user.name "Akr0n"
          git tag v${{ env.NEWVERSION }}
          git push origin v${{ env.NEWVERSION }}

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release with changelog
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEWVERSION }}
          release_name: Release v${{ env.NEWVERSION }}
          body: ${{ steps.gh_changelog.outputs.changelog }}
          prerelease: true

      - name: Upload release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/excel_to_sql_converter.exe
          asset_name: excel_to_sql_converter.exe
          asset_content_type: application/octet-stream
