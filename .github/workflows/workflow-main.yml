name: PROD - Build & Release Python Executable for Windows

on:
  push:
    branches:
      - main

jobs:
  release-job:
    runs-on: windows-latest        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # serve per avere tutta la history

      - name: Check if the last commit is a merge from develop
        id: check_merge
        run: |
          # SHA dell'ultimo commit su main
          $LAST_COMMIT = (git rev-parse HEAD).Trim()
          Write-Output "⚠️ HEAD: $LAST_COMMIT"

          # conta i parent (se sono 2 parent -> merge commit)
          $PARENTS = (git rev-list --parents -n 1 $LAST_COMMIT).Split(" ")
          Write-Output "⚠️ Parents: $PARENTS"

          $parts = $PARENTS -split ' '
          if ($parts.Count -ne 3) {
            Write-Output "❌ The last commit is not a merge from develop. Stopping the workflow."
            Add-Content -Path $env:GITHUB_ENV -Value "MERGE_FROM_DEVELOP=false"
            Write-Output "⚠️ merge_from_develop=false" >> $GITHUB_ENV
            exit 0
          }

          # parent SHAs (i due parent dopo lo SHA del merge commit)
          $parent1 = $parts[1]
          $parent2 = $parts[2]

          # assicuriamoci di avere il riferimento origin/develop aggiornato
          git fetch origin develop

          $developSHA = (git rev-parse origin/develop).Trim()
          Write-Output "⚠️ origin/develop SHA: $developSHA"

          if ($parent1 -eq $developSHA -or $parent2 -eq $developSHA) {
            Write-Output "✅ The last commit is a merge from develop."
            Add-Content -Path $env:GITHUB_ENV -Value "MERGE_FROM_DEVELOP=true"
            Write-Output "⚠️ merge_from_develop=true" >> $env:GITHUB_ENV
          } else {
            Write-Output "❌ The last commit does not contain develop as a parent. Stopping the workflow."
            Add-Content -Path $env:GITHUB_ENV -Value "MERGE_FROM_DEVELOP=false"
            Write-Output "⚠️ merge_from_develop=false" >> $GITHUB_ENV
            exit 0
          }
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed excel_to_sql_converter.py

      - name: Get last dev tag
        id: get_tag
        run: |
          # elenco tutti i tag e prendo l’ultimo che finisce con -dev
          git fetch --tags
          $lastDevTag = git tag --list "v*-dev" | Sort-Object {[version]($_.TrimStart("v") -replace "-dev","")} -Descending | Select-Object -First 1
          if (-not $lastDevTag) {
            Write-Error "❌ No dev tag found!"
            exit 1
          }

          Write-Output "✅ Last dev tag found: $lastDevTag"

          # tolgo il suffisso -dev
          $releaseVersion = $lastDevTag -replace "-dev",""
          Write-Output "⚠️ DEBUG: Stampo la variabile che riporta la versione che verrà usata --> $releaseVersion"
          $releaseTag = "$releaseVersion"

          Write-Output "✅ release_tag=$releaseTag" >> $env:GITHUB_ENV
          Write-Output "✅ release_version=$releaseVersion" >> $env:GITHUB_ENV

      - name: Create and push tag
        run: |
          git config --global user.email "federico.bot@gmail.com"
          git config --global user.name "Akr0n"
          git tag ${{ env.release_tag }}
          git push origin ${{ env.release_tag }}
        
      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release with changelog
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release_tag }}
          release_name: Release ${{ env.release_tag }}
          body: ${{ steps.changelog.outputs.changelog }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/excel_to_sql_converter.exe
          asset_name: excel_to_sql_converter.exe
          asset_content_type: application/octet-stream
